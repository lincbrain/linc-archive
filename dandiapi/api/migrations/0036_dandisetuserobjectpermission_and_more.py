# Generated by Django 4.1 on 2022-09-09 10:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def migrate_dandiset_permissions(apps, _):
    Dandiset = apps.get_model('api', 'Dandiset')
    DandisetUserObjectPermission = apps.get_model('api', 'DandisetUserObjectPermission')
    UserObjectPermission = apps.get_model('guardian', 'UserObjectPermission')

    for user_object_permission in UserObjectPermission.objects.all():
        # only copy over permissions for dandisets that still exist
        if Dandiset.objects.filter(id=user_object_permission.object_pk).exists():
            DandisetUserObjectPermission.objects.create(
                content_object_id=user_object_permission.object_pk,
                permission=user_object_permission.permission,
                user=user_object_permission.user,
            )

    # the rest of the perms can be deleted since they belong to orphaned dandisets
    UserObjectPermission.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0035_alter_asset_zarr_delete_embargoedzarrarchive_and_more'),
        # this migration has to depend on a guardian migration so ours runs after guardian models
        # get loaded. the last guardian migration was picked arbitrarily.
        ('guardian', '0002_generic_permissions_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='DandisetUserObjectPermission',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'content_object',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='api.dandiset'
                    ),
                ),
                (
                    'permission',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='auth.permission'
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                'abstract': False,
                'unique_together': {('user', 'permission', 'content_object')},
            },
        ),
        migrations.CreateModel(
            name='DandisetGroupObjectPermission',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'content_object',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='api.dandiset'
                    ),
                ),
                (
                    'group',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group'),
                ),
                (
                    'permission',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='auth.permission'
                    ),
                ),
            ],
            options={
                'abstract': False,
                'unique_together': {('group', 'permission', 'content_object')},
            },
        ),
        migrations.RunPython(migrate_dandiset_permissions),
    ]
